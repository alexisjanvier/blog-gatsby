{"version":3,"sources":["webpack:///component---src-pages-index-js-0f1ab3197480b8c0554e.js","webpack:///./~/date-fns/difference_in_calendar_days/index.js","webpack:///./~/date-fns/format/index.js","webpack:///./~/date-fns/get_day_of_year/index.js","webpack:///./~/date-fns/get_iso_week/index.js","webpack:///./~/date-fns/get_iso_year/index.js","webpack:///./~/date-fns/is_date/index.js","webpack:///./~/date-fns/is_valid/index.js","webpack:///./~/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js","webpack:///./~/date-fns/locale/en/build_distance_in_words_locale/index.js","webpack:///./~/date-fns/locale/en/build_format_locale/index.js","webpack:///./~/date-fns/locale/en/index.js","webpack:///./~/date-fns/locale/fr/build_distance_in_words_locale/index.js","webpack:///./~/date-fns/locale/fr/build_format_locale/index.js","webpack:///./~/date-fns/locale/fr/index.js","webpack:///./~/date-fns/parse/index.js","webpack:///./~/date-fns/start_of_day/index.js","webpack:///./~/date-fns/start_of_iso_week/index.js","webpack:///./~/date-fns/start_of_iso_year/index.js","webpack:///./~/date-fns/start_of_week/index.js","webpack:///./~/date-fns/start_of_year/index.js","webpack:///./~/hoist-non-react-statics/index.js","webpack:///./src/pages/index.js"],"names":["webpackJsonp","./node_modules/date-fns/difference_in_calendar_days/index.js","module","exports","__webpack_require__","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDay","startOfDayRight","timestampLeft","getTime","getTimezoneOffset","MILLISECONDS_IN_MINUTE","timestampRight","Math","round","MILLISECONDS_IN_DAY","./node_modules/date-fns/format/index.js","format","dirtyDate","dirtyFormatStr","dirtyOptions","formatStr","String","options","locale","localeFormatters","enLocale","formatters","formattingTokensRegExp","date","parse","isValid","formatFn","buildFormatFn","i","formatter","array","match","length","removeFormattingTokens","output","Function","input","replace","formatTimezone","offset","delimeter","sign","absOffset","abs","hours","floor","minutes","addLeadingZeros","number","targetLength","toString","getDayOfYear","getISOWeek","getISOYear","M","getMonth","MM","Q","ceil","D","getDate","DD","DDD","DDDD","d","getDay","E","W","WW","YY","getFullYear","substr","YYYY","GG","GGGG","H","getHours","HH","h","hh","m","getMinutes","mm","s","getSeconds","ss","S","getMilliseconds","SS","SSS","Z","ZZ","X","x","./node_modules/date-fns/get_day_of_year/index.js","diff","startOfYear","dayOfYear","./node_modules/date-fns/get_iso_week/index.js","startOfISOWeek","startOfISOYear","MILLISECONDS_IN_WEEK","./node_modules/date-fns/get_iso_year/index.js","year","fourthOfJanuaryOfNextYear","Date","setFullYear","setHours","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","./node_modules/date-fns/is_date/index.js","isDate","argument","./node_modules/date-fns/is_valid/index.js","isNaN","TypeError","call","./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js","buildFormattingTokensRegExp","formatterKeys","key","hasOwnProperty","push","formattingTokens","commonFormatterKeys","concat","sort","reverse","RegExp","join","./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js","buildDistanceInWordsLocale","localize","token","count","result","distanceInWordsLocale","one","other","addSuffix","comparison","lessThanXSeconds","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","./node_modules/date-fns/locale/en/build_format_locale/index.js","buildFormatLocale","months3char","monthsFull","weekdays2char","weekdays3char","weekdaysFull","meridiemUppercase","meridiemLowercase","meridiemFull","MMM","MMMM","dd","ddd","dddd","A","a","aa","ordinalFormatters","forEach","formatterToken","ordinal","rem100","./node_modules/date-fns/locale/en/index.js","distanceInWords","./node_modules/date-fns/locale/fr/build_distance_in_words_locale/index.js","./node_modules/date-fns/locale/fr/build_format_locale/index.js","Wo","feminineOrdinal","formatterTokens","masculineOrdinal","monthsTokens","monthToken","commonFormatters","dayOfMonthToken","dayOfMonthFormatter","./node_modules/date-fns/locale/fr/index.js","./node_modules/date-fns/parse/index.js","additionalDigits","DEFAULT_ADDITIONAL_DIGITS","Number","dateStrings","splitDateString","parseYearResult","parseYear","restDateString","parseDate","timestamp","time","parseTime","timezone","parseTimezone","dateString","timeString","split","parseTokenDateTimeDelimeter","parseTokenPlainTime","test","parseTokenTimezone","exec","parseTokenYYY","parseTokensYYY","parseTokenYYYYY","parseTokensYYYYY","parseTokenYYYY","yearString","parseInt","slice","parseTokenYY","centuryString","month","week","setUTCFullYear","parseTokenMM","parseTokenDDD","parseTokenMMDD","day","parseTokenWww","dayOfISOYear","parseTokenWwwD","dayOfWeek","parseTokenHH","parseFloat","MILLISECONDS_IN_HOUR","parseTokenHHMM","parseTokenHHMMSS","seconds","timezoneString","absoluteOffset","parseTokenTimezoneZ","parseTokenTimezoneHH","parseTokenTimezoneHHMM","isoYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","getUTCDate","./node_modules/date-fns/start_of_day/index.js","./node_modules/date-fns/start_of_iso_week/index.js","startOfWeek","weekStartsOn","./node_modules/date-fns/start_of_iso_year/index.js","fourthOfJanuary","./node_modules/date-fns/start_of_week/index.js","setDate","./node_modules/date-fns/start_of_year/index.js","cleanDate","./node_modules/hoist-non-react-statics/index.js","REACT_STATICS","childContextTypes","contextTypes","defaultProps","displayName","getDefaultProps","mixins","propTypes","type","KNOWN_STATICS","name","prototype","caller","callee","arguments","arity","defineProperty","Object","getOwnPropertyNames","getOwnPropertySymbols","getOwnPropertyDescriptor","getPrototypeOf","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","keys","descriptor","e","./node_modules/babel-loader/lib/index.js?{\"plugins\":[\"/home/alexis/Blog/Perso-V2/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\",\"/home/alexis/Blog/Perso-V2/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"/home/alexis/Blog/Perso-V2/node_modules/babel-plugin-transform-object-assign/lib/index.js\"],\"presets\":[[\"/home/alexis/Blog/Perso-V2/node_modules/babel-preset-env/lib/index.js\",{\"loose\":true,\"uglify\":true,\"modules\":\"commonjs\",\"targets\":{\"browsers\":[\"> 1%\",\"last 2 versions\",\"IE >= 9\"]},\"exclude\":[\"transform-regenerator\",\"transform-es2015-typeof-symbol\"]}],\"/home/alexis/Blog/Perso-V2/node_modules/babel-preset-stage-0/lib/index.js\",\"/home/alexis/Blog/Perso-V2/node_modules/babel-preset-react/lib/index.js\"],\"cacheDirectory\":true}!./src/pages/index.js","_interopRequireDefault","obj","__esModule","default","query","undefined","_react","_react2","_gatsbyLink","_gatsbyLink2","_format","_format2","_fr","_fr2","_ref","data","createElement","allMarkdownRemark","edges","map","_ref2","node","className","id","to","frontmatter","slug","title","tags","description"],"mappings":"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","file":"component---src-pages-index-js-0f1ab3197480b8c0554e.js","sourcesContent":["webpackJsonp([2345137460201621000],{\n\n/***/ \"./node_modules/date-fns/difference_in_calendar_days/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar startOfDay = __webpack_require__(\"./node_modules/date-fns/start_of_day/index.js\")\n\t\n\tvar MILLISECONDS_IN_MINUTE = 60000\n\tvar MILLISECONDS_IN_DAY = 86400000\n\t\n\t/**\n\t * @category Day Helpers\n\t * @summary Get the number of calendar days between the given dates.\n\t *\n\t * @description\n\t * Get the number of calendar days between the given dates.\n\t *\n\t * @param {Date|String|Number} dateLeft - the later date\n\t * @param {Date|String|Number} dateRight - the earlier date\n\t * @returns {Number} the number of calendar days\n\t *\n\t * @example\n\t * // How many calendar days are between\n\t * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n\t * var result = differenceInCalendarDays(\n\t *   new Date(2012, 6, 2, 0, 0),\n\t *   new Date(2011, 6, 2, 23, 0)\n\t * )\n\t * //=> 366\n\t */\n\tfunction differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {\n\t  var startOfDayLeft = startOfDay(dirtyDateLeft)\n\t  var startOfDayRight = startOfDay(dirtyDateRight)\n\t\n\t  var timestampLeft = startOfDayLeft.getTime() -\n\t    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n\t  var timestampRight = startOfDayRight.getTime() -\n\t    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n\t\n\t  // Round the number of days to the nearest integer\n\t  // because the number of milliseconds in a day is not constant\n\t  // (e.g. it's different in the day of the daylight saving time clock shift)\n\t  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)\n\t}\n\t\n\tmodule.exports = differenceInCalendarDays\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/format/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar getDayOfYear = __webpack_require__(\"./node_modules/date-fns/get_day_of_year/index.js\")\n\tvar getISOWeek = __webpack_require__(\"./node_modules/date-fns/get_iso_week/index.js\")\n\tvar getISOYear = __webpack_require__(\"./node_modules/date-fns/get_iso_year/index.js\")\n\tvar parse = __webpack_require__(\"./node_modules/date-fns/parse/index.js\")\n\tvar isValid = __webpack_require__(\"./node_modules/date-fns/is_valid/index.js\")\n\tvar enLocale = __webpack_require__(\"./node_modules/date-fns/locale/en/index.js\")\n\t\n\t/**\n\t * @category Common Helpers\n\t * @summary Format the date.\n\t *\n\t * @description\n\t * Return the formatted date string in the given format.\n\t *\n\t * Accepted tokens:\n\t * | Unit                    | Token | Result examples                  |\n\t * |-------------------------|-------|----------------------------------|\n\t * | Month                   | M     | 1, 2, ..., 12                    |\n\t * |                         | Mo    | 1st, 2nd, ..., 12th              |\n\t * |                         | MM    | 01, 02, ..., 12                  |\n\t * |                         | MMM   | Jan, Feb, ..., Dec               |\n\t * |                         | MMMM  | January, February, ..., December |\n\t * | Quarter                 | Q     | 1, 2, 3, 4                       |\n\t * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n\t * | Day of month            | D     | 1, 2, ..., 31                    |\n\t * |                         | Do    | 1st, 2nd, ..., 31st              |\n\t * |                         | DD    | 01, 02, ..., 31                  |\n\t * | Day of year             | DDD   | 1, 2, ..., 366                   |\n\t * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n\t * |                         | DDDD  | 001, 002, ..., 366               |\n\t * | Day of week             | d     | 0, 1, ..., 6                     |\n\t * |                         | do    | 0th, 1st, ..., 6th               |\n\t * |                         | dd    | Su, Mo, ..., Sa                  |\n\t * |                         | ddd   | Sun, Mon, ..., Sat               |\n\t * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n\t * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n\t * | ISO week                | W     | 1, 2, ..., 53                    |\n\t * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n\t * |                         | WW    | 01, 02, ..., 53                  |\n\t * | Year                    | YY    | 00, 01, ..., 99                  |\n\t * |                         | YYYY  | 1900, 1901, ..., 2099            |\n\t * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n\t * |                         | GGGG  | 1900, 1901, ..., 2099            |\n\t * | AM/PM                   | A     | AM, PM                           |\n\t * |                         | a     | am, pm                           |\n\t * |                         | aa    | a.m., p.m.                       |\n\t * | Hour                    | H     | 0, 1, ... 23                     |\n\t * |                         | HH    | 00, 01, ... 23                   |\n\t * |                         | h     | 1, 2, ..., 12                    |\n\t * |                         | hh    | 01, 02, ..., 12                  |\n\t * | Minute                  | m     | 0, 1, ..., 59                    |\n\t * |                         | mm    | 00, 01, ..., 59                  |\n\t * | Second                  | s     | 0, 1, ..., 59                    |\n\t * |                         | ss    | 00, 01, ..., 59                  |\n\t * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n\t * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n\t * | Millisecond             | SSS   | 000, 001, ..., 999               |\n\t * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |\n\t * |                         | ZZ    | -0100, +0000, ..., +1200         |\n\t * | Seconds timestamp       | X     | 512969520                        |\n\t * | Milliseconds timestamp  | x     | 512969520900                     |\n\t *\n\t * The characters wrapped in square brackets are escaped.\n\t *\n\t * The result may vary by locale.\n\t *\n\t * @param {Date|String|Number} date - the original date\n\t * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens\n\t * @param {Object} [options] - the object with options\n\t * @param {Object} [options.locale=enLocale] - the locale object\n\t * @returns {String} the formatted date string\n\t *\n\t * @example\n\t * // Represent 11 February 2014 in middle-endian format:\n\t * var result = format(\n\t *   new Date(2014, 1, 11),\n\t *   'MM/DD/YYYY'\n\t * )\n\t * //=> '02/11/2014'\n\t *\n\t * @example\n\t * // Represent 2 July 2014 in Esperanto:\n\t * var eoLocale = require('date-fns/locale/eo')\n\t * var result = format(\n\t *   new Date(2014, 6, 2),\n\t *   'Do [de] MMMM YYYY',\n\t *   {locale: eoLocale}\n\t * )\n\t * //=> '2-a de julio 2014'\n\t */\n\tfunction format (dirtyDate, dirtyFormatStr, dirtyOptions) {\n\t  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n\t  var options = dirtyOptions || {}\n\t\n\t  var locale = options.locale\n\t  var localeFormatters = enLocale.format.formatters\n\t  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp\n\t  if (locale && locale.format && locale.format.formatters) {\n\t    localeFormatters = locale.format.formatters\n\t\n\t    if (locale.format.formattingTokensRegExp) {\n\t      formattingTokensRegExp = locale.format.formattingTokensRegExp\n\t    }\n\t  }\n\t\n\t  var date = parse(dirtyDate)\n\t\n\t  if (!isValid(date)) {\n\t    return 'Invalid Date'\n\t  }\n\t\n\t  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp)\n\t\n\t  return formatFn(date)\n\t}\n\t\n\tvar formatters = {\n\t  // Month: 1, 2, ..., 12\n\t  'M': function (date) {\n\t    return date.getMonth() + 1\n\t  },\n\t\n\t  // Month: 01, 02, ..., 12\n\t  'MM': function (date) {\n\t    return addLeadingZeros(date.getMonth() + 1, 2)\n\t  },\n\t\n\t  // Quarter: 1, 2, 3, 4\n\t  'Q': function (date) {\n\t    return Math.ceil((date.getMonth() + 1) / 3)\n\t  },\n\t\n\t  // Day of month: 1, 2, ..., 31\n\t  'D': function (date) {\n\t    return date.getDate()\n\t  },\n\t\n\t  // Day of month: 01, 02, ..., 31\n\t  'DD': function (date) {\n\t    return addLeadingZeros(date.getDate(), 2)\n\t  },\n\t\n\t  // Day of year: 1, 2, ..., 366\n\t  'DDD': function (date) {\n\t    return getDayOfYear(date)\n\t  },\n\t\n\t  // Day of year: 001, 002, ..., 366\n\t  'DDDD': function (date) {\n\t    return addLeadingZeros(getDayOfYear(date), 3)\n\t  },\n\t\n\t  // Day of week: 0, 1, ..., 6\n\t  'd': function (date) {\n\t    return date.getDay()\n\t  },\n\t\n\t  // Day of ISO week: 1, 2, ..., 7\n\t  'E': function (date) {\n\t    return date.getDay() || 7\n\t  },\n\t\n\t  // ISO week: 1, 2, ..., 53\n\t  'W': function (date) {\n\t    return getISOWeek(date)\n\t  },\n\t\n\t  // ISO week: 01, 02, ..., 53\n\t  'WW': function (date) {\n\t    return addLeadingZeros(getISOWeek(date), 2)\n\t  },\n\t\n\t  // Year: 00, 01, ..., 99\n\t  'YY': function (date) {\n\t    return addLeadingZeros(date.getFullYear(), 4).substr(2)\n\t  },\n\t\n\t  // Year: 1900, 1901, ..., 2099\n\t  'YYYY': function (date) {\n\t    return addLeadingZeros(date.getFullYear(), 4)\n\t  },\n\t\n\t  // ISO week-numbering year: 00, 01, ..., 99\n\t  'GG': function (date) {\n\t    return String(getISOYear(date)).substr(2)\n\t  },\n\t\n\t  // ISO week-numbering year: 1900, 1901, ..., 2099\n\t  'GGGG': function (date) {\n\t    return getISOYear(date)\n\t  },\n\t\n\t  // Hour: 0, 1, ... 23\n\t  'H': function (date) {\n\t    return date.getHours()\n\t  },\n\t\n\t  // Hour: 00, 01, ..., 23\n\t  'HH': function (date) {\n\t    return addLeadingZeros(date.getHours(), 2)\n\t  },\n\t\n\t  // Hour: 1, 2, ..., 12\n\t  'h': function (date) {\n\t    var hours = date.getHours()\n\t    if (hours === 0) {\n\t      return 12\n\t    } else if (hours > 12) {\n\t      return hours % 12\n\t    } else {\n\t      return hours\n\t    }\n\t  },\n\t\n\t  // Hour: 01, 02, ..., 12\n\t  'hh': function (date) {\n\t    return addLeadingZeros(formatters['h'](date), 2)\n\t  },\n\t\n\t  // Minute: 0, 1, ..., 59\n\t  'm': function (date) {\n\t    return date.getMinutes()\n\t  },\n\t\n\t  // Minute: 00, 01, ..., 59\n\t  'mm': function (date) {\n\t    return addLeadingZeros(date.getMinutes(), 2)\n\t  },\n\t\n\t  // Second: 0, 1, ..., 59\n\t  's': function (date) {\n\t    return date.getSeconds()\n\t  },\n\t\n\t  // Second: 00, 01, ..., 59\n\t  'ss': function (date) {\n\t    return addLeadingZeros(date.getSeconds(), 2)\n\t  },\n\t\n\t  // 1/10 of second: 0, 1, ..., 9\n\t  'S': function (date) {\n\t    return Math.floor(date.getMilliseconds() / 100)\n\t  },\n\t\n\t  // 1/100 of second: 00, 01, ..., 99\n\t  'SS': function (date) {\n\t    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)\n\t  },\n\t\n\t  // Millisecond: 000, 001, ..., 999\n\t  'SSS': function (date) {\n\t    return addLeadingZeros(date.getMilliseconds(), 3)\n\t  },\n\t\n\t  // Timezone: -01:00, +00:00, ... +12:00\n\t  'Z': function (date) {\n\t    return formatTimezone(date.getTimezoneOffset(), ':')\n\t  },\n\t\n\t  // Timezone: -0100, +0000, ... +1200\n\t  'ZZ': function (date) {\n\t    return formatTimezone(date.getTimezoneOffset())\n\t  },\n\t\n\t  // Seconds timestamp: 512969520\n\t  'X': function (date) {\n\t    return Math.floor(date.getTime() / 1000)\n\t  },\n\t\n\t  // Milliseconds timestamp: 512969520900\n\t  'x': function (date) {\n\t    return date.getTime()\n\t  }\n\t}\n\t\n\tfunction buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {\n\t  var array = formatStr.match(formattingTokensRegExp)\n\t  var length = array.length\n\t\n\t  var i\n\t  var formatter\n\t  for (i = 0; i < length; i++) {\n\t    formatter = localeFormatters[array[i]] || formatters[array[i]]\n\t    if (formatter) {\n\t      array[i] = formatter\n\t    } else {\n\t      array[i] = removeFormattingTokens(array[i])\n\t    }\n\t  }\n\t\n\t  return function (date) {\n\t    var output = ''\n\t    for (var i = 0; i < length; i++) {\n\t      if (array[i] instanceof Function) {\n\t        output += array[i](date, formatters)\n\t      } else {\n\t        output += array[i]\n\t      }\n\t    }\n\t    return output\n\t  }\n\t}\n\t\n\tfunction removeFormattingTokens (input) {\n\t  if (input.match(/\\[[\\s\\S]/)) {\n\t    return input.replace(/^\\[|]$/g, '')\n\t  }\n\t  return input.replace(/\\\\/g, '')\n\t}\n\t\n\tfunction formatTimezone (offset, delimeter) {\n\t  delimeter = delimeter || ''\n\t  var sign = offset > 0 ? '-' : '+'\n\t  var absOffset = Math.abs(offset)\n\t  var hours = Math.floor(absOffset / 60)\n\t  var minutes = absOffset % 60\n\t  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)\n\t}\n\t\n\tfunction addLeadingZeros (number, targetLength) {\n\t  var output = Math.abs(number).toString()\n\t  while (output.length < targetLength) {\n\t    output = '0' + output\n\t  }\n\t  return output\n\t}\n\t\n\tmodule.exports = format\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/get_day_of_year/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar parse = __webpack_require__(\"./node_modules/date-fns/parse/index.js\")\n\tvar startOfYear = __webpack_require__(\"./node_modules/date-fns/start_of_year/index.js\")\n\tvar differenceInCalendarDays = __webpack_require__(\"./node_modules/date-fns/difference_in_calendar_days/index.js\")\n\t\n\t/**\n\t * @category Day Helpers\n\t * @summary Get the day of the year of the given date.\n\t *\n\t * @description\n\t * Get the day of the year of the given date.\n\t *\n\t * @param {Date|String|Number} date - the given date\n\t * @returns {Number} the day of year\n\t *\n\t * @example\n\t * // Which day of the year is 2 July 2014?\n\t * var result = getDayOfYear(new Date(2014, 6, 2))\n\t * //=> 183\n\t */\n\tfunction getDayOfYear (dirtyDate) {\n\t  var date = parse(dirtyDate)\n\t  var diff = differenceInCalendarDays(date, startOfYear(date))\n\t  var dayOfYear = diff + 1\n\t  return dayOfYear\n\t}\n\t\n\tmodule.exports = getDayOfYear\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/get_iso_week/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar parse = __webpack_require__(\"./node_modules/date-fns/parse/index.js\")\n\tvar startOfISOWeek = __webpack_require__(\"./node_modules/date-fns/start_of_iso_week/index.js\")\n\tvar startOfISOYear = __webpack_require__(\"./node_modules/date-fns/start_of_iso_year/index.js\")\n\t\n\tvar MILLISECONDS_IN_WEEK = 604800000\n\t\n\t/**\n\t * @category ISO Week Helpers\n\t * @summary Get the ISO week of the given date.\n\t *\n\t * @description\n\t * Get the ISO week of the given date.\n\t *\n\t * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n\t *\n\t * @param {Date|String|Number} date - the given date\n\t * @returns {Number} the ISO week\n\t *\n\t * @example\n\t * // Which week of the ISO-week numbering year is 2 January 2005?\n\t * var result = getISOWeek(new Date(2005, 0, 2))\n\t * //=> 53\n\t */\n\tfunction getISOWeek (dirtyDate) {\n\t  var date = parse(dirtyDate)\n\t  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime()\n\t\n\t  // Round the number of days to the nearest integer\n\t  // because the number of milliseconds in a week is not constant\n\t  // (e.g. it's different in the week of the daylight saving time clock shift)\n\t  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n\t}\n\t\n\tmodule.exports = getISOWeek\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/get_iso_year/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar parse = __webpack_require__(\"./node_modules/date-fns/parse/index.js\")\n\tvar startOfISOWeek = __webpack_require__(\"./node_modules/date-fns/start_of_iso_week/index.js\")\n\t\n\t/**\n\t * @category ISO Week-Numbering Year Helpers\n\t * @summary Get the ISO week-numbering year of the given date.\n\t *\n\t * @description\n\t * Get the ISO week-numbering year of the given date,\n\t * which always starts 3 days before the year's first Thursday.\n\t *\n\t * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n\t *\n\t * @param {Date|String|Number} date - the given date\n\t * @returns {Number} the ISO week-numbering year\n\t *\n\t * @example\n\t * // Which ISO-week numbering year is 2 January 2005?\n\t * var result = getISOYear(new Date(2005, 0, 2))\n\t * //=> 2004\n\t */\n\tfunction getISOYear (dirtyDate) {\n\t  var date = parse(dirtyDate)\n\t  var year = date.getFullYear()\n\t\n\t  var fourthOfJanuaryOfNextYear = new Date(0)\n\t  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)\n\t  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)\n\t  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear)\n\t\n\t  var fourthOfJanuaryOfThisYear = new Date(0)\n\t  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4)\n\t  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0)\n\t  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear)\n\t\n\t  if (date.getTime() >= startOfNextYear.getTime()) {\n\t    return year + 1\n\t  } else if (date.getTime() >= startOfThisYear.getTime()) {\n\t    return year\n\t  } else {\n\t    return year - 1\n\t  }\n\t}\n\t\n\tmodule.exports = getISOYear\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/is_date/index.js\":\n/***/ (function(module, exports) {\n\n\t/**\n\t * @category Common Helpers\n\t * @summary Is the given argument an instance of Date?\n\t *\n\t * @description\n\t * Is the given argument an instance of Date?\n\t *\n\t * @param {*} argument - the argument to check\n\t * @returns {Boolean} the given argument is an instance of Date\n\t *\n\t * @example\n\t * // Is 'mayonnaise' a Date?\n\t * var result = isDate('mayonnaise')\n\t * //=> false\n\t */\n\tfunction isDate (argument) {\n\t  return argument instanceof Date\n\t}\n\t\n\tmodule.exports = isDate\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/is_valid/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar isDate = __webpack_require__(\"./node_modules/date-fns/is_date/index.js\")\n\t\n\t/**\n\t * @category Common Helpers\n\t * @summary Is the given date valid?\n\t *\n\t * @description\n\t * Returns false if argument is Invalid Date and true otherwise.\n\t * Invalid Date is a Date, whose time value is NaN.\n\t *\n\t * Time value of Date: http://es5.github.io/#x15.9.1.1\n\t *\n\t * @param {Date} date - the date to check\n\t * @returns {Boolean} the date is valid\n\t * @throws {TypeError} argument must be an instance of Date\n\t *\n\t * @example\n\t * // For the valid date:\n\t * var result = isValid(new Date(2014, 1, 31))\n\t * //=> true\n\t *\n\t * @example\n\t * // For the invalid date:\n\t * var result = isValid(new Date(''))\n\t * //=> false\n\t */\n\tfunction isValid (dirtyDate) {\n\t  if (isDate(dirtyDate)) {\n\t    return !isNaN(dirtyDate)\n\t  } else {\n\t    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')\n\t  }\n\t}\n\t\n\tmodule.exports = isValid\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js\":\n/***/ (function(module, exports) {\n\n\tvar commonFormatterKeys = [\n\t  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',\n\t  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',\n\t  'H', 'HH', 'h', 'hh', 'm', 'mm',\n\t  's', 'ss', 'S', 'SS', 'SSS',\n\t  'Z', 'ZZ', 'X', 'x'\n\t]\n\t\n\tfunction buildFormattingTokensRegExp (formatters) {\n\t  var formatterKeys = []\n\t  for (var key in formatters) {\n\t    if (formatters.hasOwnProperty(key)) {\n\t      formatterKeys.push(key)\n\t    }\n\t  }\n\t\n\t  var formattingTokens = commonFormatterKeys\n\t    .concat(formatterKeys)\n\t    .sort()\n\t    .reverse()\n\t  var formattingTokensRegExp = new RegExp(\n\t    '(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'\n\t  )\n\t\n\t  return formattingTokensRegExp\n\t}\n\t\n\tmodule.exports = buildFormattingTokensRegExp\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js\":\n/***/ (function(module, exports) {\n\n\tfunction buildDistanceInWordsLocale () {\n\t  var distanceInWordsLocale = {\n\t    lessThanXSeconds: {\n\t      one: 'less than a second',\n\t      other: 'less than {{count}} seconds'\n\t    },\n\t\n\t    xSeconds: {\n\t      one: '1 second',\n\t      other: '{{count}} seconds'\n\t    },\n\t\n\t    halfAMinute: 'half a minute',\n\t\n\t    lessThanXMinutes: {\n\t      one: 'less than a minute',\n\t      other: 'less than {{count}} minutes'\n\t    },\n\t\n\t    xMinutes: {\n\t      one: '1 minute',\n\t      other: '{{count}} minutes'\n\t    },\n\t\n\t    aboutXHours: {\n\t      one: 'about 1 hour',\n\t      other: 'about {{count}} hours'\n\t    },\n\t\n\t    xHours: {\n\t      one: '1 hour',\n\t      other: '{{count}} hours'\n\t    },\n\t\n\t    xDays: {\n\t      one: '1 day',\n\t      other: '{{count}} days'\n\t    },\n\t\n\t    aboutXMonths: {\n\t      one: 'about 1 month',\n\t      other: 'about {{count}} months'\n\t    },\n\t\n\t    xMonths: {\n\t      one: '1 month',\n\t      other: '{{count}} months'\n\t    },\n\t\n\t    aboutXYears: {\n\t      one: 'about 1 year',\n\t      other: 'about {{count}} years'\n\t    },\n\t\n\t    xYears: {\n\t      one: '1 year',\n\t      other: '{{count}} years'\n\t    },\n\t\n\t    overXYears: {\n\t      one: 'over 1 year',\n\t      other: 'over {{count}} years'\n\t    },\n\t\n\t    almostXYears: {\n\t      one: 'almost 1 year',\n\t      other: 'almost {{count}} years'\n\t    }\n\t  }\n\t\n\t  function localize (token, count, options) {\n\t    options = options || {}\n\t\n\t    var result\n\t    if (typeof distanceInWordsLocale[token] === 'string') {\n\t      result = distanceInWordsLocale[token]\n\t    } else if (count === 1) {\n\t      result = distanceInWordsLocale[token].one\n\t    } else {\n\t      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n\t    }\n\t\n\t    if (options.addSuffix) {\n\t      if (options.comparison > 0) {\n\t        return 'in ' + result\n\t      } else {\n\t        return result + ' ago'\n\t      }\n\t    }\n\t\n\t    return result\n\t  }\n\t\n\t  return {\n\t    localize: localize\n\t  }\n\t}\n\t\n\tmodule.exports = buildDistanceInWordsLocale\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/locale/en/build_format_locale/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar buildFormattingTokensRegExp = __webpack_require__(\"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js\")\n\t\n\tfunction buildFormatLocale () {\n\t  // Note: in English, the names of days of the week and months are capitalized.\n\t  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n\t  // Generally, formatted dates should look like they are in the middle of a sentence,\n\t  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\t  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\t  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\t  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n\t  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\t  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n\t  var meridiemUppercase = ['AM', 'PM']\n\t  var meridiemLowercase = ['am', 'pm']\n\t  var meridiemFull = ['a.m.', 'p.m.']\n\t\n\t  var formatters = {\n\t    // Month: Jan, Feb, ..., Dec\n\t    'MMM': function (date) {\n\t      return months3char[date.getMonth()]\n\t    },\n\t\n\t    // Month: January, February, ..., December\n\t    'MMMM': function (date) {\n\t      return monthsFull[date.getMonth()]\n\t    },\n\t\n\t    // Day of week: Su, Mo, ..., Sa\n\t    'dd': function (date) {\n\t      return weekdays2char[date.getDay()]\n\t    },\n\t\n\t    // Day of week: Sun, Mon, ..., Sat\n\t    'ddd': function (date) {\n\t      return weekdays3char[date.getDay()]\n\t    },\n\t\n\t    // Day of week: Sunday, Monday, ..., Saturday\n\t    'dddd': function (date) {\n\t      return weekdaysFull[date.getDay()]\n\t    },\n\t\n\t    // AM, PM\n\t    'A': function (date) {\n\t      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n\t    },\n\t\n\t    // am, pm\n\t    'a': function (date) {\n\t      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n\t    },\n\t\n\t    // a.m., p.m.\n\t    'aa': function (date) {\n\t      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n\t    }\n\t  }\n\t\n\t  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n\t  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n\t  ordinalFormatters.forEach(function (formatterToken) {\n\t    formatters[formatterToken + 'o'] = function (date, formatters) {\n\t      return ordinal(formatters[formatterToken](date))\n\t    }\n\t  })\n\t\n\t  return {\n\t    formatters: formatters,\n\t    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n\t  }\n\t}\n\t\n\tfunction ordinal (number) {\n\t  var rem100 = number % 100\n\t  if (rem100 > 20 || rem100 < 10) {\n\t    switch (rem100 % 10) {\n\t      case 1:\n\t        return number + 'st'\n\t      case 2:\n\t        return number + 'nd'\n\t      case 3:\n\t        return number + 'rd'\n\t    }\n\t  }\n\t  return number + 'th'\n\t}\n\t\n\tmodule.exports = buildFormatLocale\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/locale/en/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar buildDistanceInWordsLocale = __webpack_require__(\"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js\")\n\tvar buildFormatLocale = __webpack_require__(\"./node_modules/date-fns/locale/en/build_format_locale/index.js\")\n\t\n\t/**\n\t * @category Locales\n\t * @summary English locale.\n\t */\n\tmodule.exports = {\n\t  distanceInWords: buildDistanceInWordsLocale(),\n\t  format: buildFormatLocale()\n\t}\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/locale/fr/build_distance_in_words_locale/index.js\":\n/***/ (function(module, exports) {\n\n\tfunction buildDistanceInWordsLocale () {\n\t  var distanceInWordsLocale = {\n\t    lessThanXSeconds: {\n\t      one: 'moins d’une seconde',\n\t      other: 'moins de {{count}} secondes'\n\t    },\n\t\n\t    xSeconds: {\n\t      one: '1 seconde',\n\t      other: '{{count}} secondes'\n\t    },\n\t\n\t    halfAMinute: '30 secondes',\n\t\n\t    lessThanXMinutes: {\n\t      one: 'moins d’une minute',\n\t      other: 'moins de {{count}} minutes'\n\t    },\n\t\n\t    xMinutes: {\n\t      one: '1 minute',\n\t      other: '{{count}} minutes'\n\t    },\n\t\n\t    aboutXHours: {\n\t      one: 'environ 1 heure',\n\t      other: 'environ {{count}} heures'\n\t    },\n\t\n\t    xHours: {\n\t      one: '1 heure',\n\t      other: '{{count}} heures'\n\t    },\n\t\n\t    xDays: {\n\t      one: '1 jour',\n\t      other: '{{count}} jours'\n\t    },\n\t\n\t    aboutXMonths: {\n\t      one: 'environ 1 mois',\n\t      other: 'environ {{count}} mois'\n\t    },\n\t\n\t    xMonths: {\n\t      one: '1 mois',\n\t      other: '{{count}} mois'\n\t    },\n\t\n\t    aboutXYears: {\n\t      one: 'environ 1 an',\n\t      other: 'environ {{count}} ans'\n\t    },\n\t\n\t    xYears: {\n\t      one: '1 an',\n\t      other: '{{count}} ans'\n\t    },\n\t\n\t    overXYears: {\n\t      one: 'plus d’un an',\n\t      other: 'plus de {{count}} ans'\n\t    },\n\t\n\t    almostXYears: {\n\t      one: 'presqu’un an',\n\t      other: 'presque {{count}} ans'\n\t    }\n\t  }\n\t\n\t  function localize (token, count, options) {\n\t    options = options || {}\n\t\n\t    var result\n\t    if (typeof distanceInWordsLocale[token] === 'string') {\n\t      result = distanceInWordsLocale[token]\n\t    } else if (count === 1) {\n\t      result = distanceInWordsLocale[token].one\n\t    } else {\n\t      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n\t    }\n\t\n\t    if (options.addSuffix) {\n\t      if (options.comparison > 0) {\n\t        return 'dans ' + result\n\t      } else {\n\t        return 'il y a ' + result\n\t      }\n\t    }\n\t\n\t    return result\n\t  }\n\t\n\t  return {\n\t    localize: localize\n\t  }\n\t}\n\t\n\tmodule.exports = buildDistanceInWordsLocale\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/locale/fr/build_format_locale/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar buildFormattingTokensRegExp = __webpack_require__(\"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js\")\n\t\n\tfunction buildFormatLocale () {\n\t  var months3char = ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juill.', 'août', 'sept.', 'oct.', 'nov.', 'déc.']\n\t  var monthsFull = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']\n\t  var weekdays2char = ['di', 'lu', 'ma', 'me', 'je', 've', 'sa']\n\t  var weekdays3char = ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.']\n\t  var weekdaysFull = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']\n\t  var meridiemUppercase = ['AM', 'PM']\n\t  var meridiemLowercase = ['am', 'pm']\n\t  var meridiemFull = ['du matin', 'de l’après-midi', 'du soir']\n\t\n\t  var formatters = {\n\t    // Month: Jan, Feb, …, Dec\n\t    'MMM': function (date) {\n\t      return months3char[date.getMonth()]\n\t    },\n\t\n\t    // Month: January, February, …, December\n\t    'MMMM': function (date) {\n\t      return monthsFull[date.getMonth()]\n\t    },\n\t\n\t    // Day of week: Su, Mo, …, Sa\n\t    'dd': function (date) {\n\t      return weekdays2char[date.getDay()]\n\t    },\n\t\n\t    // Day of week: Sun, Mon, …, Sat\n\t    'ddd': function (date) {\n\t      return weekdays3char[date.getDay()]\n\t    },\n\t\n\t    // Day of week: Sunday, Monday, …, Saturday\n\t    'dddd': function (date) {\n\t      return weekdaysFull[date.getDay()]\n\t    },\n\t\n\t    // AM, PM\n\t    'A': function (date) {\n\t      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n\t    },\n\t\n\t    // am, pm\n\t    'a': function (date) {\n\t      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n\t    },\n\t\n\t    // a.m., p.m.\n\t    'aa': function (date) {\n\t      var hours = date.getHours()\n\t\n\t      if (hours <= 12) {\n\t        return meridiemFull[0]\n\t      }\n\t\n\t      if (hours <= 16) {\n\t        return meridiemFull[1]\n\t      }\n\t\n\t      return meridiemFull[2]\n\t    },\n\t\n\t    // ISO week, ordinal version: 1st, 2nd, …, 53rd\n\t    // NOTE: Week has feminine grammatical gender in French: semaine\n\t    'Wo': function (date, formatters) {\n\t      return feminineOrdinal(formatters.W(date))\n\t    }\n\t  }\n\t\n\t  // Generate ordinal version of formatters: M → Mo, D → Do, etc.\n\t  // NOTE: For words with masculine grammatical gender in French: mois, jour, trimestre\n\t  var formatterTokens = ['M', 'D', 'DDD', 'd', 'Q']\n\t  formatterTokens.forEach(function (formatterToken) {\n\t    formatters[formatterToken + 'o'] = function (date, formatters) {\n\t      return masculineOrdinal(formatters[formatterToken](date))\n\t    }\n\t  })\n\t\n\t  // Special case for day of month ordinals in long date format context:\n\t  // 1er mars, 2 mars, 3 mars, …\n\t  // See https://github.com/date-fns/date-fns/issues/437\n\t  //\n\t  // NOTE: The below implementation works because parsing of tokens inside a\n\t  // format string is done by a greedy regular expression, i.e. longer tokens\n\t  // have priority. E.g. formatter for \"Do MMMM\" has priority over individual\n\t  // formatters for \"Do\" and \"MMMM\".\n\t  var monthsTokens = ['MMM', 'MMMM']\n\t  monthsTokens.forEach(function (monthToken) {\n\t    formatters['Do ' + monthToken] = function (date, commonFormatters) {\n\t      var dayOfMonthToken = date.getDate() === 1\n\t        ? 'Do'\n\t        : 'D'\n\t      var dayOfMonthFormatter = formatters[dayOfMonthToken] || commonFormatters[dayOfMonthToken]\n\t\n\t      return dayOfMonthFormatter(date, commonFormatters) + ' ' + formatters[monthToken](date)\n\t    }\n\t  })\n\t\n\t  return {\n\t    formatters: formatters,\n\t    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n\t  }\n\t}\n\t\n\tfunction masculineOrdinal (number) {\n\t  if (number === 1) {\n\t    return '1er'\n\t  }\n\t\n\t  return number + 'e'\n\t}\n\t\n\tfunction feminineOrdinal (number) {\n\t  if (number === 1) {\n\t    return '1re'\n\t  }\n\t\n\t  return number + 'e'\n\t}\n\t\n\tmodule.exports = buildFormatLocale\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/locale/fr/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar buildDistanceInWordsLocale = __webpack_require__(\"./node_modules/date-fns/locale/fr/build_distance_in_words_locale/index.js\")\n\tvar buildFormatLocale = __webpack_require__(\"./node_modules/date-fns/locale/fr/build_format_locale/index.js\")\n\t\n\t/**\n\t * @category Locales\n\t * @summary French locale.\n\t * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}\n\t * @author François B [@fbonzon]{@link https://github.com/fbonzon}\n\t */\n\tmodule.exports = {\n\t  distanceInWords: buildDistanceInWordsLocale(),\n\t  format: buildFormatLocale()\n\t}\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/parse/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar isDate = __webpack_require__(\"./node_modules/date-fns/is_date/index.js\")\n\t\n\tvar MILLISECONDS_IN_HOUR = 3600000\n\tvar MILLISECONDS_IN_MINUTE = 60000\n\tvar DEFAULT_ADDITIONAL_DIGITS = 2\n\t\n\tvar parseTokenDateTimeDelimeter = /[T ]/\n\tvar parseTokenPlainTime = /:/\n\t\n\t// year tokens\n\tvar parseTokenYY = /^(\\d{2})$/\n\tvar parseTokensYYY = [\n\t  /^([+-]\\d{2})$/, // 0 additional digits\n\t  /^([+-]\\d{3})$/, // 1 additional digit\n\t  /^([+-]\\d{4})$/ // 2 additional digits\n\t]\n\t\n\tvar parseTokenYYYY = /^(\\d{4})/\n\tvar parseTokensYYYYY = [\n\t  /^([+-]\\d{4})/, // 0 additional digits\n\t  /^([+-]\\d{5})/, // 1 additional digit\n\t  /^([+-]\\d{6})/ // 2 additional digits\n\t]\n\t\n\t// date tokens\n\tvar parseTokenMM = /^-(\\d{2})$/\n\tvar parseTokenDDD = /^-?(\\d{3})$/\n\tvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\n\tvar parseTokenWww = /^-?W(\\d{2})$/\n\tvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\t\n\t// time tokens\n\tvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\n\tvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\tvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\t\n\t// timezone tokens\n\tvar parseTokenTimezone = /([Z+-].*)$/\n\tvar parseTokenTimezoneZ = /^(Z)$/\n\tvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\n\tvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\t\n\t/**\n\t * @category Common Helpers\n\t * @summary Convert the given argument to an instance of Date.\n\t *\n\t * @description\n\t * Convert the given argument to an instance of Date.\n\t *\n\t * If the argument is an instance of Date, the function returns its clone.\n\t *\n\t * If the argument is a number, it is treated as a timestamp.\n\t *\n\t * If an argument is a string, the function tries to parse it.\n\t * Function accepts complete ISO 8601 formats as well as partial implementations.\n\t * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n\t *\n\t * If all above fails, the function passes the given argument to Date constructor.\n\t *\n\t * @param {Date|String|Number} argument - the value to convert\n\t * @param {Object} [options] - the object with options\n\t * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n\t * @returns {Date} the parsed date in the local time zone\n\t *\n\t * @example\n\t * // Convert string '2014-02-11T11:30:30' to date:\n\t * var result = parse('2014-02-11T11:30:30')\n\t * //=> Tue Feb 11 2014 11:30:30\n\t *\n\t * @example\n\t * // Parse string '+02014101',\n\t * // if the additional number of digits in the extended year format is 1:\n\t * var result = parse('+02014101', {additionalDigits: 1})\n\t * //=> Fri Apr 11 2014 00:00:00\n\t */\n\tfunction parse (argument, dirtyOptions) {\n\t  if (isDate(argument)) {\n\t    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n\t    return new Date(argument.getTime())\n\t  } else if (typeof argument !== 'string') {\n\t    return new Date(argument)\n\t  }\n\t\n\t  var options = dirtyOptions || {}\n\t  var additionalDigits = options.additionalDigits\n\t  if (additionalDigits == null) {\n\t    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n\t  } else {\n\t    additionalDigits = Number(additionalDigits)\n\t  }\n\t\n\t  var dateStrings = splitDateString(argument)\n\t\n\t  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n\t  var year = parseYearResult.year\n\t  var restDateString = parseYearResult.restDateString\n\t\n\t  var date = parseDate(restDateString, year)\n\t\n\t  if (date) {\n\t    var timestamp = date.getTime()\n\t    var time = 0\n\t    var offset\n\t\n\t    if (dateStrings.time) {\n\t      time = parseTime(dateStrings.time)\n\t    }\n\t\n\t    if (dateStrings.timezone) {\n\t      offset = parseTimezone(dateStrings.timezone)\n\t    } else {\n\t      // get offset accurate to hour in timezones that change offset\n\t      offset = new Date(timestamp + time).getTimezoneOffset()\n\t      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()\n\t    }\n\t\n\t    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n\t  } else {\n\t    return new Date(argument)\n\t  }\n\t}\n\t\n\tfunction splitDateString (dateString) {\n\t  var dateStrings = {}\n\t  var array = dateString.split(parseTokenDateTimeDelimeter)\n\t  var timeString\n\t\n\t  if (parseTokenPlainTime.test(array[0])) {\n\t    dateStrings.date = null\n\t    timeString = array[0]\n\t  } else {\n\t    dateStrings.date = array[0]\n\t    timeString = array[1]\n\t  }\n\t\n\t  if (timeString) {\n\t    var token = parseTokenTimezone.exec(timeString)\n\t    if (token) {\n\t      dateStrings.time = timeString.replace(token[1], '')\n\t      dateStrings.timezone = token[1]\n\t    } else {\n\t      dateStrings.time = timeString\n\t    }\n\t  }\n\t\n\t  return dateStrings\n\t}\n\t\n\tfunction parseYear (dateString, additionalDigits) {\n\t  var parseTokenYYY = parseTokensYYY[additionalDigits]\n\t  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\t\n\t  var token\n\t\n\t  // YYYY or ±YYYYY\n\t  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n\t  if (token) {\n\t    var yearString = token[1]\n\t    return {\n\t      year: parseInt(yearString, 10),\n\t      restDateString: dateString.slice(yearString.length)\n\t    }\n\t  }\n\t\n\t  // YY or ±YYY\n\t  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n\t  if (token) {\n\t    var centuryString = token[1]\n\t    return {\n\t      year: parseInt(centuryString, 10) * 100,\n\t      restDateString: dateString.slice(centuryString.length)\n\t    }\n\t  }\n\t\n\t  // Invalid ISO-formatted year\n\t  return {\n\t    year: null\n\t  }\n\t}\n\t\n\tfunction parseDate (dateString, year) {\n\t  // Invalid ISO-formatted year\n\t  if (year === null) {\n\t    return null\n\t  }\n\t\n\t  var token\n\t  var date\n\t  var month\n\t  var week\n\t\n\t  // YYYY\n\t  if (dateString.length === 0) {\n\t    date = new Date(0)\n\t    date.setUTCFullYear(year)\n\t    return date\n\t  }\n\t\n\t  // YYYY-MM\n\t  token = parseTokenMM.exec(dateString)\n\t  if (token) {\n\t    date = new Date(0)\n\t    month = parseInt(token[1], 10) - 1\n\t    date.setUTCFullYear(year, month)\n\t    return date\n\t  }\n\t\n\t  // YYYY-DDD or YYYYDDD\n\t  token = parseTokenDDD.exec(dateString)\n\t  if (token) {\n\t    date = new Date(0)\n\t    var dayOfYear = parseInt(token[1], 10)\n\t    date.setUTCFullYear(year, 0, dayOfYear)\n\t    return date\n\t  }\n\t\n\t  // YYYY-MM-DD or YYYYMMDD\n\t  token = parseTokenMMDD.exec(dateString)\n\t  if (token) {\n\t    date = new Date(0)\n\t    month = parseInt(token[1], 10) - 1\n\t    var day = parseInt(token[2], 10)\n\t    date.setUTCFullYear(year, month, day)\n\t    return date\n\t  }\n\t\n\t  // YYYY-Www or YYYYWww\n\t  token = parseTokenWww.exec(dateString)\n\t  if (token) {\n\t    week = parseInt(token[1], 10) - 1\n\t    return dayOfISOYear(year, week)\n\t  }\n\t\n\t  // YYYY-Www-D or YYYYWwwD\n\t  token = parseTokenWwwD.exec(dateString)\n\t  if (token) {\n\t    week = parseInt(token[1], 10) - 1\n\t    var dayOfWeek = parseInt(token[2], 10) - 1\n\t    return dayOfISOYear(year, week, dayOfWeek)\n\t  }\n\t\n\t  // Invalid ISO-formatted date\n\t  return null\n\t}\n\t\n\tfunction parseTime (timeString) {\n\t  var token\n\t  var hours\n\t  var minutes\n\t\n\t  // hh\n\t  token = parseTokenHH.exec(timeString)\n\t  if (token) {\n\t    hours = parseFloat(token[1].replace(',', '.'))\n\t    return (hours % 24) * MILLISECONDS_IN_HOUR\n\t  }\n\t\n\t  // hh:mm or hhmm\n\t  token = parseTokenHHMM.exec(timeString)\n\t  if (token) {\n\t    hours = parseInt(token[1], 10)\n\t    minutes = parseFloat(token[2].replace(',', '.'))\n\t    return (hours % 24) * MILLISECONDS_IN_HOUR +\n\t      minutes * MILLISECONDS_IN_MINUTE\n\t  }\n\t\n\t  // hh:mm:ss or hhmmss\n\t  token = parseTokenHHMMSS.exec(timeString)\n\t  if (token) {\n\t    hours = parseInt(token[1], 10)\n\t    minutes = parseInt(token[2], 10)\n\t    var seconds = parseFloat(token[3].replace(',', '.'))\n\t    return (hours % 24) * MILLISECONDS_IN_HOUR +\n\t      minutes * MILLISECONDS_IN_MINUTE +\n\t      seconds * 1000\n\t  }\n\t\n\t  // Invalid ISO-formatted time\n\t  return null\n\t}\n\t\n\tfunction parseTimezone (timezoneString) {\n\t  var token\n\t  var absoluteOffset\n\t\n\t  // Z\n\t  token = parseTokenTimezoneZ.exec(timezoneString)\n\t  if (token) {\n\t    return 0\n\t  }\n\t\n\t  // ±hh\n\t  token = parseTokenTimezoneHH.exec(timezoneString)\n\t  if (token) {\n\t    absoluteOffset = parseInt(token[2], 10) * 60\n\t    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n\t  }\n\t\n\t  // ±hh:mm or ±hhmm\n\t  token = parseTokenTimezoneHHMM.exec(timezoneString)\n\t  if (token) {\n\t    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n\t    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n\t  }\n\t\n\t  return 0\n\t}\n\t\n\tfunction dayOfISOYear (isoYear, week, day) {\n\t  week = week || 0\n\t  day = day || 0\n\t  var date = new Date(0)\n\t  date.setUTCFullYear(isoYear, 0, 4)\n\t  var fourthOfJanuaryDay = date.getUTCDay() || 7\n\t  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n\t  date.setUTCDate(date.getUTCDate() + diff)\n\t  return date\n\t}\n\t\n\tmodule.exports = parse\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/start_of_day/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar parse = __webpack_require__(\"./node_modules/date-fns/parse/index.js\")\n\t\n\t/**\n\t * @category Day Helpers\n\t * @summary Return the start of a day for the given date.\n\t *\n\t * @description\n\t * Return the start of a day for the given date.\n\t * The result will be in the local timezone.\n\t *\n\t * @param {Date|String|Number} date - the original date\n\t * @returns {Date} the start of a day\n\t *\n\t * @example\n\t * // The start of a day for 2 September 2014 11:55:00:\n\t * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n\t * //=> Tue Sep 02 2014 00:00:00\n\t */\n\tfunction startOfDay (dirtyDate) {\n\t  var date = parse(dirtyDate)\n\t  date.setHours(0, 0, 0, 0)\n\t  return date\n\t}\n\t\n\tmodule.exports = startOfDay\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/start_of_iso_week/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar startOfWeek = __webpack_require__(\"./node_modules/date-fns/start_of_week/index.js\")\n\t\n\t/**\n\t * @category ISO Week Helpers\n\t * @summary Return the start of an ISO week for the given date.\n\t *\n\t * @description\n\t * Return the start of an ISO week for the given date.\n\t * The result will be in the local timezone.\n\t *\n\t * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n\t *\n\t * @param {Date|String|Number} date - the original date\n\t * @returns {Date} the start of an ISO week\n\t *\n\t * @example\n\t * // The start of an ISO week for 2 September 2014 11:55:00:\n\t * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n\t * //=> Mon Sep 01 2014 00:00:00\n\t */\n\tfunction startOfISOWeek (dirtyDate) {\n\t  return startOfWeek(dirtyDate, {weekStartsOn: 1})\n\t}\n\t\n\tmodule.exports = startOfISOWeek\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/start_of_iso_year/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar getISOYear = __webpack_require__(\"./node_modules/date-fns/get_iso_year/index.js\")\n\tvar startOfISOWeek = __webpack_require__(\"./node_modules/date-fns/start_of_iso_week/index.js\")\n\t\n\t/**\n\t * @category ISO Week-Numbering Year Helpers\n\t * @summary Return the start of an ISO week-numbering year for the given date.\n\t *\n\t * @description\n\t * Return the start of an ISO week-numbering year,\n\t * which always starts 3 days before the year's first Thursday.\n\t * The result will be in the local timezone.\n\t *\n\t * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n\t *\n\t * @param {Date|String|Number} date - the original date\n\t * @returns {Date} the start of an ISO year\n\t *\n\t * @example\n\t * // The start of an ISO week-numbering year for 2 July 2005:\n\t * var result = startOfISOYear(new Date(2005, 6, 2))\n\t * //=> Mon Jan 03 2005 00:00:00\n\t */\n\tfunction startOfISOYear (dirtyDate) {\n\t  var year = getISOYear(dirtyDate)\n\t  var fourthOfJanuary = new Date(0)\n\t  fourthOfJanuary.setFullYear(year, 0, 4)\n\t  fourthOfJanuary.setHours(0, 0, 0, 0)\n\t  var date = startOfISOWeek(fourthOfJanuary)\n\t  return date\n\t}\n\t\n\tmodule.exports = startOfISOYear\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/start_of_week/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar parse = __webpack_require__(\"./node_modules/date-fns/parse/index.js\")\n\t\n\t/**\n\t * @category Week Helpers\n\t * @summary Return the start of a week for the given date.\n\t *\n\t * @description\n\t * Return the start of a week for the given date.\n\t * The result will be in the local timezone.\n\t *\n\t * @param {Date|String|Number} date - the original date\n\t * @param {Object} [options] - the object with options\n\t * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n\t * @returns {Date} the start of a week\n\t *\n\t * @example\n\t * // The start of a week for 2 September 2014 11:55:00:\n\t * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n\t * //=> Sun Aug 31 2014 00:00:00\n\t *\n\t * @example\n\t * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n\t * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n\t * //=> Mon Sep 01 2014 00:00:00\n\t */\n\tfunction startOfWeek (dirtyDate, dirtyOptions) {\n\t  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\n\t\n\t  var date = parse(dirtyDate)\n\t  var day = date.getDay()\n\t  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\t\n\t  date.setDate(date.getDate() - diff)\n\t  date.setHours(0, 0, 0, 0)\n\t  return date\n\t}\n\t\n\tmodule.exports = startOfWeek\n\n\n/***/ }),\n\n/***/ \"./node_modules/date-fns/start_of_year/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar parse = __webpack_require__(\"./node_modules/date-fns/parse/index.js\")\n\t\n\t/**\n\t * @category Year Helpers\n\t * @summary Return the start of a year for the given date.\n\t *\n\t * @description\n\t * Return the start of a year for the given date.\n\t * The result will be in the local timezone.\n\t *\n\t * @param {Date|String|Number} date - the original date\n\t * @returns {Date} the start of a year\n\t *\n\t * @example\n\t * // The start of a year for 2 September 2014 11:55:00:\n\t * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n\t * //=> Wed Jan 01 2014 00:00:00\n\t */\n\tfunction startOfYear (dirtyDate) {\n\t  var cleanDate = parse(dirtyDate)\n\t  var date = new Date(0)\n\t  date.setFullYear(cleanDate.getFullYear(), 0, 1)\n\t  date.setHours(0, 0, 0, 0)\n\t  return date\n\t}\n\t\n\tmodule.exports = startOfYear\n\n\n/***/ }),\n\n/***/ \"./node_modules/hoist-non-react-statics/index.js\":\n/***/ (function(module, exports) {\n\n\t/**\n\t * Copyright 2015, Yahoo! Inc.\n\t * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n\t */\n\t'use strict';\n\t\n\tvar REACT_STATICS = {\n\t    childContextTypes: true,\n\t    contextTypes: true,\n\t    defaultProps: true,\n\t    displayName: true,\n\t    getDefaultProps: true,\n\t    mixins: true,\n\t    propTypes: true,\n\t    type: true\n\t};\n\t\n\tvar KNOWN_STATICS = {\n\t  name: true,\n\t  length: true,\n\t  prototype: true,\n\t  caller: true,\n\t  callee: true,\n\t  arguments: true,\n\t  arity: true\n\t};\n\t\n\tvar defineProperty = Object.defineProperty;\n\tvar getOwnPropertyNames = Object.getOwnPropertyNames;\n\tvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\tvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\tvar getPrototypeOf = Object.getPrototypeOf;\n\tvar objectPrototype = getPrototypeOf && getPrototypeOf(Object);\n\t\n\tmodule.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n\t    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components\n\t\n\t        if (objectPrototype) {\n\t            var inheritedComponent = getPrototypeOf(sourceComponent);\n\t            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n\t                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n\t            }\n\t        }\n\t\n\t        var keys = getOwnPropertyNames(sourceComponent);\n\t\n\t        if (getOwnPropertySymbols) {\n\t            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n\t        }\n\t\n\t        for (var i = 0; i < keys.length; ++i) {\n\t            var key = keys[i];\n\t            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {\n\t                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\t                try { // Avoid failures from read-only properties\n\t                    defineProperty(targetComponent, key, descriptor);\n\t                } catch (e) {}\n\t            }\n\t        }\n\t\n\t        return targetComponent;\n\t    }\n\t\n\t    return targetComponent;\n\t};\n\n\n/***/ }),\n\n/***/ \"./node_modules/babel-loader/lib/index.js?{\\\"plugins\\\":[\\\"/home/alexis/Blog/Perso-V2/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\\\",\\\"/home/alexis/Blog/Perso-V2/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"/home/alexis/Blog/Perso-V2/node_modules/babel-plugin-transform-object-assign/lib/index.js\\\"],\\\"presets\\\":[[\\\"/home/alexis/Blog/Perso-V2/node_modules/babel-preset-env/lib/index.js\\\",{\\\"loose\\\":true,\\\"uglify\\\":true,\\\"modules\\\":\\\"commonjs\\\",\\\"targets\\\":{\\\"browsers\\\":[\\\"> 1%\\\",\\\"last 2 versions\\\",\\\"IE >= 9\\\"]},\\\"exclude\\\":[\\\"transform-regenerator\\\",\\\"transform-es2015-typeof-symbol\\\"]}],\\\"/home/alexis/Blog/Perso-V2/node_modules/babel-preset-stage-0/lib/index.js\\\",\\\"/home/alexis/Blog/Perso-V2/node_modules/babel-preset-react/lib/index.js\\\"],\\\"cacheDirectory\\\":true}!./src/pages/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.query = undefined;\n\t\n\tvar _react = __webpack_require__(\"./node_modules/react/react.js\");\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _gatsbyLink = __webpack_require__(\"./node_modules/gatsby-link/index.js\");\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _format = __webpack_require__(\"./node_modules/date-fns/format/index.js\");\n\t\n\tvar _format2 = _interopRequireDefault(_format);\n\t\n\tvar _fr = __webpack_require__(\"./node_modules/date-fns/locale/fr/index.js\");\n\t\n\tvar _fr2 = _interopRequireDefault(_fr);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = function (_ref) {\n\t    var data = _ref.data;\n\t\n\t    return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        data.allMarkdownRemark.edges.map(function (_ref2) {\n\t            var node = _ref2.node;\n\t            return _react2.default.createElement(\n\t                'div',\n\t                { className: 'blog-list', key: node.id },\n\t                _react2.default.createElement(\n\t                    _gatsbyLink2.default,\n\t                    { to: node.frontmatter.slug },\n\t                    _react2.default.createElement(\n\t                        'h2',\n\t                        null,\n\t                        node.frontmatter.title\n\t                    ),\n\t                    _react2.default.createElement(\n\t                        'h4',\n\t                        null,\n\t                        'Publi\\xE9 le ',\n\t                        (0, _format2.default)(node.frontmatter.date, 'DD MMMM YYYY', { locale: _fr2.default }),\n\t                        ' ',\n\t                        _react2.default.createElement(\n\t                            'span',\n\t                            null,\n\t                            '(',\n\t                            '' + node.frontmatter.tags,\n\t                            ')'\n\t                        )\n\t                    ),\n\t                    _react2.default.createElement(\n\t                        'p',\n\t                        null,\n\t                        node.frontmatter.description\n\t                    )\n\t                )\n\t            );\n\t        })\n\t    );\n\t};\n\t\n\tvar query = exports.query = '** extracted graphql fragment **';\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-index-js-0f1ab3197480b8c0554e.js","var startOfDay = require('../start_of_day/index.js')\n\nvar MILLISECONDS_IN_MINUTE = 60000\nvar MILLISECONDS_IN_DAY = 86400000\n\n/**\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n */\nfunction differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {\n  var startOfDayLeft = startOfDay(dirtyDateLeft)\n  var startOfDayRight = startOfDay(dirtyDateRight)\n\n  var timestampLeft = startOfDayLeft.getTime() -\n    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n  var timestampRight = startOfDayRight.getTime() -\n    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)\n}\n\nmodule.exports = differenceInCalendarDays\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/difference_in_calendar_days/index.js\n// module id = ./node_modules/date-fns/difference_in_calendar_days/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var getDayOfYear = require('../get_day_of_year/index.js')\nvar getISOWeek = require('../get_iso_week/index.js')\nvar getISOYear = require('../get_iso_year/index.js')\nvar parse = require('../parse/index.js')\nvar isValid = require('../is_valid/index.js')\nvar enLocale = require('../locale/en/index.js')\n\n/**\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format.\n *\n * Accepted tokens:\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens\n * @param {Object} [options] - the object with options\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the formatted date string\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(\n *   new Date(2014, 1, 11),\n *   'MM/DD/YYYY'\n * )\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * var eoLocale = require('date-fns/locale/eo')\n * var result = format(\n *   new Date(2014, 6, 2),\n *   'Do [de] MMMM YYYY',\n *   {locale: eoLocale}\n * )\n * //=> '2-a de julio 2014'\n */\nfunction format (dirtyDate, dirtyFormatStr, dirtyOptions) {\n  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n  var options = dirtyOptions || {}\n\n  var locale = options.locale\n  var localeFormatters = enLocale.format.formatters\n  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp\n  if (locale && locale.format && locale.format.formatters) {\n    localeFormatters = locale.format.formatters\n\n    if (locale.format.formattingTokensRegExp) {\n      formattingTokensRegExp = locale.format.formattingTokensRegExp\n    }\n  }\n\n  var date = parse(dirtyDate)\n\n  if (!isValid(date)) {\n    return 'Invalid Date'\n  }\n\n  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp)\n\n  return formatFn(date)\n}\n\nvar formatters = {\n  // Month: 1, 2, ..., 12\n  'M': function (date) {\n    return date.getMonth() + 1\n  },\n\n  // Month: 01, 02, ..., 12\n  'MM': function (date) {\n    return addLeadingZeros(date.getMonth() + 1, 2)\n  },\n\n  // Quarter: 1, 2, 3, 4\n  'Q': function (date) {\n    return Math.ceil((date.getMonth() + 1) / 3)\n  },\n\n  // Day of month: 1, 2, ..., 31\n  'D': function (date) {\n    return date.getDate()\n  },\n\n  // Day of month: 01, 02, ..., 31\n  'DD': function (date) {\n    return addLeadingZeros(date.getDate(), 2)\n  },\n\n  // Day of year: 1, 2, ..., 366\n  'DDD': function (date) {\n    return getDayOfYear(date)\n  },\n\n  // Day of year: 001, 002, ..., 366\n  'DDDD': function (date) {\n    return addLeadingZeros(getDayOfYear(date), 3)\n  },\n\n  // Day of week: 0, 1, ..., 6\n  'd': function (date) {\n    return date.getDay()\n  },\n\n  // Day of ISO week: 1, 2, ..., 7\n  'E': function (date) {\n    return date.getDay() || 7\n  },\n\n  // ISO week: 1, 2, ..., 53\n  'W': function (date) {\n    return getISOWeek(date)\n  },\n\n  // ISO week: 01, 02, ..., 53\n  'WW': function (date) {\n    return addLeadingZeros(getISOWeek(date), 2)\n  },\n\n  // Year: 00, 01, ..., 99\n  'YY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4).substr(2)\n  },\n\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4)\n  },\n\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': function (date) {\n    return String(getISOYear(date)).substr(2)\n  },\n\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': function (date) {\n    return getISOYear(date)\n  },\n\n  // Hour: 0, 1, ... 23\n  'H': function (date) {\n    return date.getHours()\n  },\n\n  // Hour: 00, 01, ..., 23\n  'HH': function (date) {\n    return addLeadingZeros(date.getHours(), 2)\n  },\n\n  // Hour: 1, 2, ..., 12\n  'h': function (date) {\n    var hours = date.getHours()\n    if (hours === 0) {\n      return 12\n    } else if (hours > 12) {\n      return hours % 12\n    } else {\n      return hours\n    }\n  },\n\n  // Hour: 01, 02, ..., 12\n  'hh': function (date) {\n    return addLeadingZeros(formatters['h'](date), 2)\n  },\n\n  // Minute: 0, 1, ..., 59\n  'm': function (date) {\n    return date.getMinutes()\n  },\n\n  // Minute: 00, 01, ..., 59\n  'mm': function (date) {\n    return addLeadingZeros(date.getMinutes(), 2)\n  },\n\n  // Second: 0, 1, ..., 59\n  's': function (date) {\n    return date.getSeconds()\n  },\n\n  // Second: 00, 01, ..., 59\n  'ss': function (date) {\n    return addLeadingZeros(date.getSeconds(), 2)\n  },\n\n  // 1/10 of second: 0, 1, ..., 9\n  'S': function (date) {\n    return Math.floor(date.getMilliseconds() / 100)\n  },\n\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': function (date) {\n    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)\n  },\n\n  // Millisecond: 000, 001, ..., 999\n  'SSS': function (date) {\n    return addLeadingZeros(date.getMilliseconds(), 3)\n  },\n\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': function (date) {\n    return formatTimezone(date.getTimezoneOffset(), ':')\n  },\n\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': function (date) {\n    return formatTimezone(date.getTimezoneOffset())\n  },\n\n  // Seconds timestamp: 512969520\n  'X': function (date) {\n    return Math.floor(date.getTime() / 1000)\n  },\n\n  // Milliseconds timestamp: 512969520900\n  'x': function (date) {\n    return date.getTime()\n  }\n}\n\nfunction buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {\n  var array = formatStr.match(formattingTokensRegExp)\n  var length = array.length\n\n  var i\n  var formatter\n  for (i = 0; i < length; i++) {\n    formatter = localeFormatters[array[i]] || formatters[array[i]]\n    if (formatter) {\n      array[i] = formatter\n    } else {\n      array[i] = removeFormattingTokens(array[i])\n    }\n  }\n\n  return function (date) {\n    var output = ''\n    for (var i = 0; i < length; i++) {\n      if (array[i] instanceof Function) {\n        output += array[i](date, formatters)\n      } else {\n        output += array[i]\n      }\n    }\n    return output\n  }\n}\n\nfunction removeFormattingTokens (input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|]$/g, '')\n  }\n  return input.replace(/\\\\/g, '')\n}\n\nfunction formatTimezone (offset, delimeter) {\n  delimeter = delimeter || ''\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = Math.floor(absOffset / 60)\n  var minutes = absOffset % 60\n  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)\n}\n\nfunction addLeadingZeros (number, targetLength) {\n  var output = Math.abs(number).toString()\n  while (output.length < targetLength) {\n    output = '0' + output\n  }\n  return output\n}\n\nmodule.exports = format\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/format/index.js\n// module id = ./node_modules/date-fns/format/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var parse = require('../parse/index.js')\nvar startOfYear = require('../start_of_year/index.js')\nvar differenceInCalendarDays = require('../difference_in_calendar_days/index.js')\n\n/**\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * var result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = differenceInCalendarDays(date, startOfYear(date))\n  var dayOfYear = diff + 1\n  return dayOfYear\n}\n\nmodule.exports = getDayOfYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/get_day_of_year/index.js\n// module id = ./node_modules/date-fns/get_day_of_year/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var parse = require('../parse/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\nvar startOfISOYear = require('../start_of_iso_year/index.js')\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n/**\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n\nmodule.exports = getISOWeek\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/get_iso_week/index.js\n// module id = ./node_modules/date-fns/get_iso_week/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var parse = require('../parse/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var year = date.getFullYear()\n\n  var fourthOfJanuaryOfNextYear = new Date(0)\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear)\n\n  var fourthOfJanuaryOfThisYear = new Date(0)\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4)\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0)\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n\nmodule.exports = getISOYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/get_iso_year/index.js\n// module id = ./node_modules/date-fns/get_iso_year/index.js\n// module chunks = 2345137460201621000 7065993314207131000","/**\n * @category Common Helpers\n * @summary Is the given argument an instance of Date?\n *\n * @description\n * Is the given argument an instance of Date?\n *\n * @param {*} argument - the argument to check\n * @returns {Boolean} the given argument is an instance of Date\n *\n * @example\n * // Is 'mayonnaise' a Date?\n * var result = isDate('mayonnaise')\n * //=> false\n */\nfunction isDate (argument) {\n  return argument instanceof Date\n}\n\nmodule.exports = isDate\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/is_date/index.js\n// module id = ./node_modules/date-fns/is_date/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var isDate = require('../is_date/index.js')\n\n/**\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {Date} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} argument must be an instance of Date\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid (dirtyDate) {\n  if (isDate(dirtyDate)) {\n    return !isNaN(dirtyDate)\n  } else {\n    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')\n  }\n}\n\nmodule.exports = isValid\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/is_valid/index.js\n// module id = ./node_modules/date-fns/is_valid/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var commonFormatterKeys = [\n  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',\n  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',\n  'H', 'HH', 'h', 'hh', 'm', 'mm',\n  's', 'ss', 'S', 'SS', 'SSS',\n  'Z', 'ZZ', 'X', 'x'\n]\n\nfunction buildFormattingTokensRegExp (formatters) {\n  var formatterKeys = []\n  for (var key in formatters) {\n    if (formatters.hasOwnProperty(key)) {\n      formatterKeys.push(key)\n    }\n  }\n\n  var formattingTokens = commonFormatterKeys\n    .concat(formatterKeys)\n    .sort()\n    .reverse()\n  var formattingTokensRegExp = new RegExp(\n    '(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'\n  )\n\n  return formattingTokensRegExp\n}\n\nmodule.exports = buildFormattingTokensRegExp\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js\n// module id = ./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js\n// module chunks = 2345137460201621000 7065993314207131000","function buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n\n    xSeconds: {\n      one: '1 second',\n      other: '{{count}} seconds'\n    },\n\n    halfAMinute: 'half a minute',\n\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n\n    xHours: {\n      one: '1 hour',\n      other: '{{count}} hours'\n    },\n\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n\n    xYears: {\n      one: '1 year',\n      other: '{{count}} years'\n    },\n\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result\n      } else {\n        return result + ' ago'\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/locale/en/build_distance_in_words_locale/index.js\n// module id = ./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['a.m.', 'p.m.']\n\n  var formatters = {\n    // Month: Jan, Feb, ..., Dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: January, February, ..., December\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: Su, Mo, ..., Sa\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: Sun, Mon, ..., Sat\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: Sunday, Monday, ..., Saturday\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n    }\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  var rem100 = number % 100\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nmodule.exports = buildFormatLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/locale/en/build_format_locale/index.js\n// module id = ./node_modules/date-fns/locale/en/build_format_locale/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary English locale.\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/locale/en/index.js\n// module id = ./node_modules/date-fns/locale/en/index.js\n// module chunks = 2345137460201621000 7065993314207131000","function buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'moins d’une seconde',\n      other: 'moins de {{count}} secondes'\n    },\n\n    xSeconds: {\n      one: '1 seconde',\n      other: '{{count}} secondes'\n    },\n\n    halfAMinute: '30 secondes',\n\n    lessThanXMinutes: {\n      one: 'moins d’une minute',\n      other: 'moins de {{count}} minutes'\n    },\n\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n\n    aboutXHours: {\n      one: 'environ 1 heure',\n      other: 'environ {{count}} heures'\n    },\n\n    xHours: {\n      one: '1 heure',\n      other: '{{count}} heures'\n    },\n\n    xDays: {\n      one: '1 jour',\n      other: '{{count}} jours'\n    },\n\n    aboutXMonths: {\n      one: 'environ 1 mois',\n      other: 'environ {{count}} mois'\n    },\n\n    xMonths: {\n      one: '1 mois',\n      other: '{{count}} mois'\n    },\n\n    aboutXYears: {\n      one: 'environ 1 an',\n      other: 'environ {{count}} ans'\n    },\n\n    xYears: {\n      one: '1 an',\n      other: '{{count}} ans'\n    },\n\n    overXYears: {\n      one: 'plus d’un an',\n      other: 'plus de {{count}} ans'\n    },\n\n    almostXYears: {\n      one: 'presqu’un an',\n      other: 'presque {{count}} ans'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'dans ' + result\n      } else {\n        return 'il y a ' + result\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/locale/fr/build_distance_in_words_locale/index.js\n// module id = ./node_modules/date-fns/locale/fr/build_distance_in_words_locale/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  var months3char = ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juill.', 'août', 'sept.', 'oct.', 'nov.', 'déc.']\n  var monthsFull = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']\n  var weekdays2char = ['di', 'lu', 'ma', 'me', 'je', 've', 'sa']\n  var weekdays3char = ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.']\n  var weekdaysFull = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['du matin', 'de l’après-midi', 'du soir']\n\n  var formatters = {\n    // Month: Jan, Feb, …, Dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: January, February, …, December\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: Su, Mo, …, Sa\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: Sun, Mon, …, Sat\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: Sunday, Monday, …, Saturday\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      var hours = date.getHours()\n\n      if (hours <= 12) {\n        return meridiemFull[0]\n      }\n\n      if (hours <= 16) {\n        return meridiemFull[1]\n      }\n\n      return meridiemFull[2]\n    },\n\n    // ISO week, ordinal version: 1st, 2nd, …, 53rd\n    // NOTE: Week has feminine grammatical gender in French: semaine\n    'Wo': function (date, formatters) {\n      return feminineOrdinal(formatters.W(date))\n    }\n  }\n\n  // Generate ordinal version of formatters: M → Mo, D → Do, etc.\n  // NOTE: For words with masculine grammatical gender in French: mois, jour, trimestre\n  var formatterTokens = ['M', 'D', 'DDD', 'd', 'Q']\n  formatterTokens.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return masculineOrdinal(formatters[formatterToken](date))\n    }\n  })\n\n  // Special case for day of month ordinals in long date format context:\n  // 1er mars, 2 mars, 3 mars, …\n  // See https://github.com/date-fns/date-fns/issues/437\n  //\n  // NOTE: The below implementation works because parsing of tokens inside a\n  // format string is done by a greedy regular expression, i.e. longer tokens\n  // have priority. E.g. formatter for \"Do MMMM\" has priority over individual\n  // formatters for \"Do\" and \"MMMM\".\n  var monthsTokens = ['MMM', 'MMMM']\n  monthsTokens.forEach(function (monthToken) {\n    formatters['Do ' + monthToken] = function (date, commonFormatters) {\n      var dayOfMonthToken = date.getDate() === 1\n        ? 'Do'\n        : 'D'\n      var dayOfMonthFormatter = formatters[dayOfMonthToken] || commonFormatters[dayOfMonthToken]\n\n      return dayOfMonthFormatter(date, commonFormatters) + ' ' + formatters[monthToken](date)\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction masculineOrdinal (number) {\n  if (number === 1) {\n    return '1er'\n  }\n\n  return number + 'e'\n}\n\nfunction feminineOrdinal (number) {\n  if (number === 1) {\n    return '1re'\n  }\n\n  return number + 'e'\n}\n\nmodule.exports = buildFormatLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/locale/fr/build_format_locale/index.js\n// module id = ./node_modules/date-fns/locale/fr/build_format_locale/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary French locale.\n * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}\n * @author François B [@fbonzon]{@link https://github.com/fbonzon}\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/locale/fr/index.js\n// module id = ./node_modules/date-fns/locale/fr/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var isDate = require('../is_date/index.js')\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\n\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction parse (argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var options = dirtyOptions || {}\n  var additionalDigits = options.additionalDigits\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n  } else {\n    additionalDigits = Number(additionalDigits)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone)\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset()\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\nmodule.exports = parse\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/parse/index.js\n// module id = ./node_modules/date-fns/parse/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var parse = require('../parse/index.js')\n\n/**\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay (dirtyDate) {\n  var date = parse(dirtyDate)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfDay\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/start_of_day/index.js\n// module id = ./node_modules/date-fns/start_of_day/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var startOfWeek = require('../start_of_week/index.js')\n\n/**\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek (dirtyDate) {\n  return startOfWeek(dirtyDate, {weekStartsOn: 1})\n}\n\nmodule.exports = startOfISOWeek\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/start_of_iso_week/index.js\n// module id = ./node_modules/date-fns/start_of_iso_week/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var getISOYear = require('../get_iso_year/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOYear (dirtyDate) {\n  var year = getISOYear(dirtyDate)\n  var fourthOfJanuary = new Date(0)\n  fourthOfJanuary.setFullYear(year, 0, 4)\n  fourthOfJanuary.setHours(0, 0, 0, 0)\n  var date = startOfISOWeek(fourthOfJanuary)\n  return date\n}\n\nmodule.exports = startOfISOYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/start_of_iso_year/index.js\n// module id = ./node_modules/date-fns/start_of_iso_year/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var parse = require('../parse/index.js')\n\n/**\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @param {Object} [options] - the object with options\n * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek (dirtyDate, dirtyOptions) {\n  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\n\n  var date = parse(dirtyDate)\n  var day = date.getDay()\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\n  date.setDate(date.getDate() - diff)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfWeek\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/start_of_week/index.js\n// module id = ./node_modules/date-fns/start_of_week/index.js\n// module chunks = 2345137460201621000 7065993314207131000","var parse = require('../parse/index.js')\n\n/**\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear (dirtyDate) {\n  var cleanDate = parse(dirtyDate)\n  var date = new Date(0)\n  date.setFullYear(cleanDate.getFullYear(), 0, 1)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/date-fns/start_of_year/index.js\n// module id = ./node_modules/date-fns/start_of_year/index.js\n// module chunks = 2345137460201621000 7065993314207131000","/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nvar REACT_STATICS = {\n    childContextTypes: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\n\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = getPrototypeOf && getPrototypeOf(Object);\n\nmodule.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components\n\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n\n        var keys = getOwnPropertyNames(sourceComponent);\n\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try { // Avoid failures from read-only properties\n                    defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n\n        return targetComponent;\n    }\n\n    return targetComponent;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hoist-non-react-statics/index.js\n// module id = ./node_modules/hoist-non-react-statics/index.js\n// module chunks = 2345137460201621000 15178676390636814000","import React from 'react';\nimport Link from 'gatsby-link';\nimport format from 'date-fns/format';\nimport locale from 'date-fns/locale/fr';\n\nexport default ({ data }) => {\n    return (\n        <div>\n            {data.allMarkdownRemark.edges.map(({ node }) => (\n                <div className=\"blog-list\" key={node.id}>\n                    <Link to={node.frontmatter.slug}>\n                        <h2>{node.frontmatter.title}</h2>\n                        <h4>\n                            Publié le {format(node.frontmatter.date, 'DD MMMM YYYY', { locale })} <span>({`${node.frontmatter.tags}`})</span>\n                        </h4>\n                        <p>{node.frontmatter.description}</p>\n                    </Link>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport const query = graphql`\n    query IndexQuery {\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            totalCount\n            edges {\n                node {\n                    id\n                    frontmatter {\n                        title\n                        date\n                        tags\n                        description\n                        slug\n                    }\n                }\n            }\n        }\n    }\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/index.js"],"sourceRoot":""}